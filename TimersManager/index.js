/*
  Таймеры могут быть как одноразовыми (выполнить задачу через определённый
  промежуток времени), так и периодическими (выполнять задачу с определённым
  интервалом). Если interval = true — таймер периодический.
 */
class TimersManager {
  constructor() {
    this.tim
  }

  // вызовы метода add можно соединять manager.add(t1).add(t2, 1, 2);

  add() {
    /* Добавляет таймер в очередь на выполнение. 
      В качестве первого параметра этот метод принимает объект
      описывающий таймер, а все последующие 
      параметры передаются как аргументы для callback ф-и таймера
    */
  }

  remove() {
    /* Должен остановить определенный таймер и удалить его из очереди
    */
  }

  start() {
    // Должен запустить все таймеры на выполнениею
  }

  stop() {
    // Должен остановить все таймеры
  }

  pause() {
    // Приостанавливает работу конкретного таймера
  }

  resume() {
    // Запускает работу конкретного таймера
  }

}

const manager = new TimersManager();

const t1 = {
  name: 't1',
  delay: 1000,
  interval: false,
  job: () => console.log('t1')
};

const t2 = {
  name: 't2',
  delay: 2000,
  interval: false,
  job: (a, b) => a + b;
};

manager.add(t1);
manager.add(t2, 1, 2);
manager.start();
console.log(1);
manager.pause('t1');


/*
  Обратите внимание!
    1. TimeManager должен вызывать ошибку если поле name содержит неверный тип,
    отсутствует или пустая строка.
    2. TimeManager должен вызывать ошибку если поле delay содержит неверный тип или
    отсутствует.
    3. TimeManager должен вызывать ошибку если delay меньше 0 и больше 5000.
    4. TimeManager должен вызывать ошибку если поле interval содержит неверный тип
    или отсутствует.
    5. TimeManager должен вызывать ошибку если поле job содержит неверный тип или
    отсутствует.
    6. TimeManager должен вызывать ошибку если запустить метод add после старта.
    7. TimeManager должен вызывать ошибку если попытаться добавить таймер с именем
    котрое уже было добавлено.
 */